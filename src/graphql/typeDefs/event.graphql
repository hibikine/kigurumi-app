type Event {
  id: Int!
  name: String!
  date: DateTime!
  endDate: DateTime
  location: String!
  locationGoogleUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  #eventUrls: [EventUrl]!
  #creator: User!
  # attendees: [User!]!
  # belongings: [Belonging!]!
}

fragment EventForBelongingsFragment on Event {
  id
  name
  date
  location
  locationGoogleUrl
  createdAt
  updatedAt
  #eventUrls {
  #  ...EventUrlFragment
  #}
  # creator {
  #   ...UserFragment
  # }
  # attendees {
  #   ...UserFragment
  # }
}

fragment EventFragment on Event {
  id
  name
  date
  location
  locationGoogleUrl
  createdAt
  updatedAt
  #eventUrls {
  #  ...EventUrlFragment
  #}
  #creator {
  #  ...UserFragment
  #}
  #attendees {
  #  ...UserFragment
  #}
  #belongings {
  #  ...BelongingFragment
  #}
}

query Events {
  events {
    ...EventFragment
  }
}

type Query {
  events: [Event!]!
}

type Mutation {
  createEvent(
    name: String!
    date: DateTime!
    endDate: DateTime
    location: String!
    locationGoogleUrl: String #urls: [EventUrlInput]
  ): Event!
  updateEvent(
    id: Int!
    name: String
    date: DateTime
    endDate: DateTime
    location: String
    locationGoogleUrl: String #urls: [EventUrlInput]
  ): Event!
  deleteEvent(id: Int!): Event!
}

mutation UpdateEvent(
  $id: Int!
  $name: String
  $date: DateTime
  $endDate: DateTime
  $location: String
  $locationGoogleUrl: String #$urls: [EventUrlInput]
) {
  updateEvent(
    id: $id
    name: $name
    date: $date
    endDate: $endDate
    location: $location
    locationGoogleUrl: $locationGoogleUrl #urls: $urls
  ) {
    ...EventFragment
  }
}
